---
description: Extension Module Patterns
globs: 
alwaysApply: false
---
# Extension Module Patterns

## Pattern: Fineract Extension Package Structure
**CRITICAL**: Custom functionality must use `org.apache.fineract.extend.*` packages to maintain fork safety and upgradeability.

### Package Structure Requirements
**BASE PACKAGE**: All custom code in `org.apache.fineract.extend.*`
**FORK SAFETY**: Never modify upstream Apache Fineract core files
**UPGRADE PATH**: Extensions survive Fineract version upgrades

### Extension Package Organization
**STUDY EXAMPLES**:
- `org.apache.fineract.extend.kyc.*` - KYC functionality organization
- `org.apache.fineract.extend.creditbureau.*` - Credit bureau integration
- `org.apache.fineract.extend.configuration.*` - Extension configuration

### Custom Service Implementation
**PATTERN**: Create service interfaces in extension packages
**IMPLEMENTATION**: Follow constructor injection patterns
**REGISTRATION**: Use Spring @Service annotation for discovery

### Extension Configuration Pattern
**STUDY**: `ExtendModuleConfiguration.java` - Extension module setup
**CONDITIONAL BEANS**: Use `@ConditionalOnProperty` for optional features
**MODULE ORGANIZATION**: Group related functionality in subpackages

### Custom Entity Pattern
**PACKAGE**: Place entities in `org.apache.fineract.extend.[feature].data`
**BASE CLASSES**: Extend appropriate Fineract base classes
**AUDIT FIELDS**: Use `AbstractAuditableWithUTCDateTimeCustom` for auditable entities

### Custom API Controller Pattern
**PACKAGE**: Controllers in `org.apache.fineract.extend.[feature].api`
**SECURITY**: Use `@PreAuthorize` annotations for permission checking
**REST PATTERNS**: Follow existing Fineract API conventions

### Custom Repository Pattern
**PACKAGE**: Repositories in `org.apache.fineract.extend.[feature].repository`
**WRAPPER PATTERN**: Create RepositoryWrapper classes for entity validation
**TENANT ISOLATION**: Framework handles tenant scoping automatically

### Command Handler Extension
**PATTERN**: Place command handlers in extension packages
**REGISTRATION**: Use `@CommandType` for automatic discovery
**INHERITANCE**: Follow existing command handler patterns

### Fork Safety Guidelines
**UPSTREAM FILES**: Never modify files outside extend packages
**CUSTOMIZATION**: Use extension points and configuration
**CONTRIBUTIONS**: Core bug fixes should be contributed back to Apache

### Extension Testing Structure
**TEST PACKAGE**: Mirror main package structure in test directories
**TENANT CONTEXT**: Always setup tenant context in tests
**INTEGRATION**: Test extension integration points thoroughly

**ANTI-PATTERN**: Modifying upstream files, mixing custom code with core packages, bypassing extension patterns.

**VERIFICATION**: `find . -path "*/extend/*" -name "*.java" | head -10`
