---
description: Extension Module Patterns
globs: 
alwaysApply: false
---
# Backend Extension Module Patterns (MANDATORY)

## 🧩 Extension Package Structure (STRICT)
**RULE**: All new functionality MUST be in `org.apache.fineract.extend.*` packages

### Package Organization
```
org.apache.fineract.extend.{feature}/
├── api/                    # REST controllers  
├── domain/                 # Domain models & services
├── data/                   # JPA entities & repositories  
├── handler/               # Command handlers
└── config/                # Configuration beans
```

## 🔧 Extension Configuration Patterns

### Conditional Bean Loading  
**Reference**: `CustomAcmeConfiguration.java` - @ConditionalOnProperty usage
**Pattern**: Enable/disable extensions via application properties
```
@ConditionalOnProperty(name = "fineract.extend.{feature}.enabled", havingValue = "true")
```

### Extension Module Registration
**Reference**: Extension modules in `custom/acme/` directory structure
**Pattern**: Self-contained extension modules with independent lifecycle

## 📡 Extension API Patterns  

### REST Controller Placement
**Reference**: Controllers under `extend/` namespace prevent core conflicts
**Pattern**: `/fineract-provider/api/v1/extend/{feature}/*` endpoint structure

### Command Handler Integration
**Reference**: Command handlers that integrate with core command bus
**Pattern**: Extension commands follow same patterns as core commands

## 🔄 Extension Service Integration

### Service Layer Extensions  
**Reference**: Extension services that compose with core services
**Pattern**: Dependency injection of core services into extension services

### Repository Extensions
**Reference**: Extension repositories that extend core repository patterns  
**Pattern**: Extension entities with proper audit field integration

## ⚠️ Extension Constraints (CRITICAL)

### What Extensions CANNOT Do:
- Modify core Fineract classes
- Override core Spring beans
- Change core database schema directly  
- Intercept core API endpoints

### What Extensions MUST Do:
- Use extension package structure
- Follow conditional configuration
- Implement proper rollback for database changes
- Maintain upstream compatibility

## 🎯 Agent Loading Priority
- **Architect**: REQUIRED - System design with extension boundaries
- **DBA**: REQUIRED - Extension-safe database patterns  
- **Integrator**: REQUIRED - Extension integration patterns
- **Tester**: OPTIONAL - Extension testing strategies
- **Coder**: REQUIRED - Extension implementation patterns
- **Verifier**: REQUIRED - Extension compliance validation
